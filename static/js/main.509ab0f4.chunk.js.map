{"version":3,"sources":["postForm.js","CommentForm.js","Comment.js","api.js","Comments.js","forum.js","postList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","CommentForm","submitLabel","hasCancelButton","handleCancel","initialText","setText","isTextareaDisabled","length","event","disabled","type","Comment","comment","replies","setActiveComment","activeComment","updateComment","deleteComment","addComment","parentId","currentUserId","isEditing","isReplying","timePassed","Date","createdAt","canDelete","userId","canReply","Boolean","canEdit","replyId","toLocaleDateString","username","body","map","reply","getComments","a","createComment","toString","substr","toISOString","Comments","commentsUrl","backendComments","setBackendComments","rootComments","filter","backendComment","createCommentApi","then","commentId","updateCommentApi","updatedBackendComments","window","confirm","deleteCommentApi","getCommentsApi","data","rootComment","sort","b","getTime","Todo","posts","completePost","removePost","updatePost","setEdit","post","index","isComplete","TodoList","setPosts","test","newposts","console","log","updatedposts","removedArr","postId","newValue","prev","item","App","toDoList","setToDoList","handleToggle","mapped","task","Number","complete","handleFilter","filtered","addTask","userInput","copy","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.509ab0f4.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n    setInput('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className='forum-container'>\n      {props.edit ? (\n        <>\n        \n          <input\n            placeholder='Update your item'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            ref={inputRef}\n            className='forum-post edit'\n          />\n          <button onClick={handleSubmit} className='forum-btn edit'>\n            Update\n          </button>\n        </>\n      ) : (\n        <>\n        <div className=\"\">\n          <input\n            placeholder='Make Post'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            className='forum-post'\n            ref={inputRef}\n          />\n          </div>\n          <button onClick={handleSubmit} className='forum-btn'>\n            Make a post..\n          </button>\n        </>\n      )}\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import { useState } from \"react\";\n\nconst CommentForm = ({\n  handleSubmit,\n  submitLabel,\n  hasCancelButton = false,\n  handleCancel,\n  initialText = \"\",\n}) => {\n  const [text, setText] = useState(initialText);\n  const isTextareaDisabled = text.length === 0;\n  const onSubmit = (event) => {\n    event.preventDefault();\n    handleSubmit(text);\n    setText(\"\");\n  };\n  return (\n    <form onSubmit={onSubmit}>\n      <textarea\n        className=\"comment-form-textarea\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button className=\"comment-form-button\" disabled={isTextareaDisabled}>\n        {submitLabel}\n      </button>\n      {hasCancelButton && (\n        <button\n          type=\"button\"\n          className=\"comment-form-button comment-form-cancel-button\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </button>\n      )}\n    </form>\n  );\n};\n\nexport default CommentForm;\n","import CommentForm from \"./CommentForm\";\n\nconst Comment = ({\n  comment,\n  replies,\n  setActiveComment,\n  activeComment,\n  updateComment,\n  deleteComment,\n  addComment,\n  parentId = null,\n  currentUserId,\n}) => {\n  const isEditing =\n    activeComment &&\n    activeComment.id === comment.id &&\n    activeComment.type === \"editing\";\n  const isReplying =\n    activeComment &&\n    activeComment.id === comment.id &&\n    activeComment.type === \"replying\";\n  const fiveMinutes = 300000;\n  const timePassed = new Date() - new Date(comment.createdAt) > fiveMinutes;\n  const canDelete =\n    currentUserId === comment.userId && replies.length === 0 && !timePassed;\n  const canReply = Boolean(currentUserId);\n  const canEdit = currentUserId === comment.userId && !timePassed;\n  const replyId = parentId ? parentId : comment.id;\n  const createdAt = new Date(comment.createdAt).toLocaleDateString();\n  return (\n    <div key={comment.id} className=\"comment\">\n      <div className=\"comment-image-container\">\n      </div>\n      <div className=\"comment-right-part\">\n        <div className=\"comment-content\">\n          <div className=\"comment-author\">{comment.username}</div>\n          <div>{createdAt}</div>\n        </div>\n        {!isEditing && <div className=\"comment-text\">{comment.body}</div>}\n        {isEditing && (\n          <CommentForm\n            submitLabel=\"Update\"\n            hasCancelButton\n            initialText={comment.body}\n            handleSubmit={(text) => updateComment(text, comment.id)}\n            handleCancel={() => {\n              setActiveComment(null);\n            }}\n          />\n        )}\n        <div className=\"comment-actions\">\n          {canReply && (\n            <div\n              className=\"comment-action\"\n              onClick={() =>\n                setActiveComment({ id: comment.id, type: \"replying\" })\n              }\n            >\n              Reply\n            </div>\n          )}\n          {canEdit && (\n            <div\n              className=\"comment-action\"\n              onClick={() =>\n                setActiveComment({ id: comment.id, type: \"editing\" })\n              }\n            >\n              Edit\n            </div>\n          )}\n          {canDelete && (\n            <div\n              className=\"comment-action\"\n              onClick={() => deleteComment(comment.id)}\n            >\n              Delete\n            </div>\n          )}\n        </div>\n        {isReplying && (\n          <CommentForm\n            submitLabel=\"Reply\"\n            handleSubmit={(text) => addComment(text, replyId)}\n          />\n        )}\n        {replies.length > 0 && (\n          <div className=\"replies\">\n            {replies.map((reply) => (\n              <Comment\n                comment={reply}\n                key={reply.id}\n                setActiveComment={setActiveComment}\n                activeComment={activeComment}\n                updateComment={updateComment}\n                deleteComment={deleteComment}\n                addComment={addComment}\n                parentId={comment.id}\n                replies={[]}\n                currentUserId={currentUserId}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;\n","export const getComments = async () => {\n  return [\n   \n\n  ];\n};\n\nexport const createComment = async (text, parentId = null) => {\n  return {\n    id: Math.random().toString(36).substr(2, 9),\n    body: text,\n    parentId,\n    userId: \"1\",\n    username: \"John\",\n    createdAt: new Date().toISOString(),\n  };\n};\n\nexport const updateComment = async (text) => {\n  return { text };\n};\n\nexport const deleteComment = async () => {\n  return {};\n};\n","import { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport {\n  getComments as getCommentsApi,\n  createComment as createCommentApi,\n  updateComment as updateCommentApi,\n  deleteComment as deleteCommentApi,\n} from \"./api\";\n\nconst Comments = ({ commentsUrl, currentUserId }) => {\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(\n    (backendComment) => backendComment.parentId === null\n  );\n  const getReplies = (commentId) =>\n    backendComments\n      .filter((backendComment) => backendComment.parentId === commentId)\n      .sort(\n        (a, b) =>\n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n      );\n  const addComment = (text, parentId) => {\n    createCommentApi(text, parentId).then((comment) => {\n      setBackendComments([comment, ...backendComments]);\n      setActiveComment(null);\n    });\n  };\n\n  const updateComment = (text, commentId) => {\n    updateCommentApi(text).then(() => {\n      const updatedBackendComments = backendComments.map((backendComment) => {\n        if (backendComment.id === commentId) {\n          return { ...backendComment, body: text };\n        }\n        return backendComment;\n      });\n      setBackendComments(updatedBackendComments);\n      setActiveComment(null);\n    });\n  };\n  const deleteComment = (commentId) => {\n    if (window.confirm(\"Are you sure you want to remove comment?\")) {\n      deleteCommentApi().then(() => {\n        const updatedBackendComments = backendComments.filter(\n          (backendComment) => backendComment.id !== commentId\n        );\n        setBackendComments(updatedBackendComments);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getCommentsApi().then((data) => {\n      setBackendComments(data);\n    });\n  }, []);\n\n  return (\n    <div className=\"comments\">\n      <div className=\"comment-form-title\">comment</div>\n      <CommentForm submitLabel=\"Write\" handleSubmit={addComment} />\n      <div className=\"comments-container\">\n        {rootComments.map((rootComment) => (\n          <Comment\n            key={rootComment.id}\n            comment={rootComment}\n            replies={getReplies(rootComment.id)}\n            activeComment={activeComment}\n            setActiveComment={setActiveComment}\n            addComment={addComment}\n            deleteComment={deleteComment}\n            updateComment={updateComment}\n            currentUserId={currentUserId}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Comments;\n","import React, { useState } from 'react';\nimport postForm from './postForm';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport Comments from './Comments'\n\nconst Todo= ({ posts, completePost, removePost, updatePost }) => {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: ''\n  });\n  const [comment, setComment] = useState('');\n\n  const submitUpdate = value => {\n    updatePost(edit.id, value);\n    setEdit({\n      id: null,\n      value: ''\n    });\n  };\n  //create handlechange \n  const handleChange = e => {\n    setComment({\n      ...comment,\n      value: e.target.value\n    });\n  };\n//create handlesubmit function for setComment\n  const handleSubmit = e => {\n    e.preventDefault();\n    setComment({\n      ...comment,\n      value: e.target.value\n    });\n  };\n\n  if (edit.id) {\n    return <postForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return posts.map((post, index) => (\n    <div className=\"inline\">\n    <div\n      className={post.isComplete ? 'post-row complete' : 'post-row'}\n      key={index}\n    >\n      <div key={post.id} onClick={() => completePost(post.id)}>\n        {post.text}\n      </div>\n      <div className='icons'>\n        <RiCloseCircleLine\n          onClick={() => removePost(post.id)}\n          className='delete-icon'\n        />\n        <TiEdit\n          onClick={() => setEdit({ id: post.id, value: post.text })}\n          className='edit-icon'\n        />\n\n      </div>\n            \n    </div>\n    <Comments\n      commentsUrl=\"http://localhost:3004/comments\"\n      currentUserId=\"1\"\n    />\n    </div>\n  ));\n};\n\nexport default Todo;\n","import React, { useState } from 'react';\nimport TodoForm from './postForm'\nimport Todo from './forum';\n\nfunction TodoList() {\n  const [posts, setPosts] = useState([]);\n\n  const addPost = post => {\n    if (!post.text || /^\\s*$/.test(post.text)) {\n      return;\n    }\n\n    const newposts = [post, ...posts];\n\n    setPosts(newposts);\n    console.log(...posts);\n  };\n\n  const updatePost = (postId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setPosts(prev => prev.map(item => (item.id === postId ? newValue : item)));\n  };\n\n  const removePost = id => {\n    const removedArr = [...posts].filter(post => post.id !== id);\n\n    setPosts(removedArr);\n  };\n\n  const completePost = id => {\n    let updatedposts = posts.map(post => {\n      if (post.id === id) {\n        post.isComplete = !post.isComplete;\n      }\n      return post;\n    });\n    setPosts(updatedposts);\n  };\n\n  return (\n    <>\n      <h1>Music</h1>\n      <p>Kindly use the first input</p>\n      <TodoForm onSubmit={addPost} \n       className=\"extra\"\n      />\n      <Todo\n        posts={posts}\n        completePost={completePost}\n        removePost={removePost}\n        updatePost={updatePost}\n       \n      />\n    </>\n  );\n}\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport ToDoList from \"./postList\";\nimport ToDoForm from './postForm';\n\nfunction App() {\n  \n  const [ toDoList, setToDoList ] = useState();\n\n  const handleToggle = (id) => {\n    let mapped = toDoList.map(task => {\n      return task.id === Number(id) ? { ...task, complete: !task.complete } : { ...task};\n    });\n    setToDoList(mapped);\n  }\n\n  const handleFilter = () => {\n    let filtered = toDoList.filter(task => {\n      return !task.complete;\n    });\n    setToDoList(filtered);\n  }\n\n  const addTask = (userInput ) => {\n    let copy = [...toDoList];\n    copy = [...copy, { id: toDoList.length + 1, task: userInput, complete: false }];\n    setToDoList(copy);\n  }\n\n  return (\n    <div className=\"App\">\n      <ToDoList toDoList={toDoList} handleToggle={handleToggle} handleFilter={handleFilter}/>\n      <ToDoForm addTask={addTask}/>\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}